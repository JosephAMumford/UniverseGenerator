<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Universe Generator</title>
		<!-- Required meta tags -->
		<meta charset="utf-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1, shrink-to-fit=no"
		/>
		<meta name="description" content="" />
		<meta name="keywords" content="" />
		<meta name="author" content="" />

		<link rel="stylesheet" href="style.css" />

		<!-- Bootstrap -->
		<link
			rel="stylesheet"
			href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
			integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
			crossorigin="anonymous"
		/>

		<!-- JS, Popper.js, and jQuery -->
		<script
			src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
			integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
			crossorigin="anonymous"
		></script>
		<script
			src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
			integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
			crossorigin="anonymous"
		></script>
		<script
			src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"
			integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI"
			crossorigin="anonymous"
		></script>

		<script src="//cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script>
		<script src="Chart.bundle.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
		<!-- <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@0.7.7"></script> -->
		<script src="chartjs-plugin-zoom.js"></script>
		<script src="perlin.js"></script>
		<script src="dataReference.js"></script>
		<script src="language.js"></script>
		<script src="generator.js"></script>
		<script src="utilities.js"></script>
	</head>

	<body>
		<div class="container">
			<h1>Universe Generator</h1>
			<div class="input-group mb-3 w-50">
				<div class="input-group-prepend">
					<button
						class="btn btn-primary"
						type="button"
						id="seedButton"
						onclick="randomSeed()"
					>
						Random Seed
					</button>
				</div>
				<input
					type="text"
					class="form-control"
					id="seedInput"
					aria-label="seed"
					aria-describedby="seedInput"
					placeholder="Seed"
				/>
				<div class="input-group-append">
					<button
						type="button"
						class="btn btn-primary"
						onclick="generateUniverse()"
					>
						Generate
					</button>
				</div>
			</div>
			<div id="progressBarMain" class="progress mb-2 d-none">
				<div
					id="progressBar"
					class="progress-bar progress-bar-striped"
					role="progressbar"
					aria-valuenow="0"
					aria-valuemin="0"
					aria-valuemax="100"
					style="width: 0%;"
				></div>
			</div>
			<div class="accordion" id="universeDisplay">
				<div class="card">
					<div class="card-header" id="headingOne">
						<h2 class="mb-0">
							<button
								class="btn text-left w-75"
								type="button"
								data-toggle="collapse"
								data-target="#collapseOne"
								aria-expanded="true"
								aria-controls="collapseOne"
							>
								System Information
							</button>
							<button
								class="btn btn-outline-primary float-right"
								type="button"
								onclick="copyInfo()"
							>
								Copy
							</button>
						</h2>
					</div>

					<div
						id="collapseOne"
						class="collapse"
						aria-labelledby="headingOne"
						data-parent="#universeDisplay"
					>
						<div class="card-body">
							<table class="table table-sm table-bordered">
								<thead>
									<tr>
										<th>Name</th>
										<th>Unit</th>
										<th>Name</th>
										<th>Unit</th>
										<th>Name</th>
										<th>Unit</th>
									</tr>
								</thead>
								<tbody>
									<tr>
										<td>Diameter</td>
										<td>Kilometer (km)</td>
										<td>Distance</td>
										<td>Astronomical Unit (AU)</td>
										<td>Escape Velocity</td>
										<td>km/s</td>
									</tr>
									<tr>
										<td>Mass</td>
										<td>Kilogram (kg)</td>
										<td>Density</td>
										<td>g/cm<sup>3</sup></td>
										<td>Volume</td>
										<td>km<sup>3</sup></td>
									</tr>
									<tr>
										<td>Gravity</td>
										<td>m/s<sup>2</sup></td>
										<td>Temperature</td>
										<td>Celsius (c)</td>
									</tr>
								</tbody>
							</table>
							<pre id="list"></pre>
						</div>
					</div>
				</div>
				<div class="card">
					<div class="card-header" id="headingTwo">
						<h2 class="mb-0">
							<button
								class="btn text-left collapsed w-75"
								type="button"
								data-toggle="collapse"
								data-target="#collapseTwo"
								aria-expanded="false"
								aria-controls="collapseTwo"
							>
								Map
							</button>
							<button
								class="btn btn-outline-primary float-right"
								type="button"
								onclick="resetZoom()"
							>
								Reset Zoom
							</button>
						</h2>
					</div>
					<div
						id="collapseTwo"
						class="collapse"
						aria-labelledby="headingTwo"
						data-parent="#universeDisplay"
					>
						<div id="systemChartContainer" class="card-body">
							<div>
								<p class="text-center">
									Use mouse wheel to zoom, click and drag to pan.
								</p>
							</div>
							<h3 id="systemChartHeader"></h3>
							<p id="systemChartInfo"></p>
							<canvas id="systemChartCanvas">
								Your browser does not support the HTML5 canvas tag.</canvas
							>
						</div>
						<div id="planetChartContainer" class="card-body">
							<label for="planetChartLabel">Planet Selection</label>
							<select
								class="form-control form-control-sm w-50"
								id="planetChartSelect"
								onchange="generatePlanetMap()"
							>
							</select>
							<h3 id="planetChartHeader"></h3>
							<canvas id="planetChartCanvas">
								Your browser does not support the HTML5 canvas tag.</canvas
							>
						</div>
					</div>
				</div>
				<div class="card">
					<div class="card-header" id="headingThree">
						<h2 class="mb-0">
							<button
								class="btn btn-block text-left collapsed"
								type="button"
								data-toggle="collapse"
								data-target="#collapseThree"
								aria-expanded="false"
								aria-controls="collapseThree"
							>
								Language
							</button>
						</h2>
					</div>
					<div
						id="collapseThree"
						class="collapse"
						aria-labelledby="headingThree"
						data-parent="#universeDisplay"
					>
						<div class="card-body">
							<pre id="language"></pre>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script>
			window.onload = function () {
				document.getElementById("seedInput").value = "";
			};

			let seedValue;

			function copyInfo() {
				const copyText = document.getElementById("list").textContent;
				const textArea = document.createElement("textArea");
				textArea.textContent = copyText;
				document.body.append(textArea);
				textArea.select();
				document.execCommand("copy");
				textArea.remove();
			}

			function generateUniverse() {
				seedValue = $("#seedInput").val();
				console.log("Seed:", seedValue);
				$("#progressBar").css("width", "0%");
				$("#progressBarMain").removeClass("d-none");
				GenerateUniverse(seedValue);

				document.getElementById("list").textContent = JSON.stringify(
					Universe,
					undefined,
					2
				);

				document.getElementById("language").textContent = JSON.stringify(
					Language,
					undefined,
					2
				);

				// Re-Create System Chart
				$("#systemChartCanvas").remove();
				$("#systemChartContainer").append(
					'<canvas id="systemChartCanvas">Your browser does not support the HTML5 canvas tag.</canvas>'
				);

				generateMaps();
			}

			function randomSeed() {
				let seedGenerator = new Math.seedrandom();
				document.getElementById("seedInput").value = Math.floor(
					seedGenerator() * Number.MAX_SAFE_INTEGER
				);
			}

			function resetZoom() {
				window.systemChart.resetZoom();
			}

			function generateMaps() {
				var systemChartCanvas = document.getElementById("systemChartCanvas");
				systemChartCanvas.width = 1024;
				systemChartCanvas.height = 769;
				var systemChartContext = systemChartCanvas.getContext("2d");
				systemChartCanvas.style.backgroundColor = "rgba(32,32,32,1)";

				let systemChartOptions = {
					responsive: true,
					title: {
						display: true,
						text: "System Map",
					},
					tooltips: {
						callbacks: {
							label: function (t, d) {
								return d.datasets[t.datasetIndex].data[t.index].label;
							},
						},
					},
					scales: {
						yAxes: [
							{
								display: true,
								ticks: {
									suggestedMin: -30.0,
									suggestedMax: 30.0,
									precision: 2,
								},
								scaleLabel: {
									display: true,
									labelString: "AU",
								},
							},
						],
						xAxes: [
							{
								display: true,
								ticks: {
									suggestedMin: -30.0,
									suggestedMax: 30.0,
									precision: 2,
								},
								scaleLabel: {
									display: true,
									labelString: "AU",
								},
							},
						],
					},
					plugins: {
						zoom: {
							pan: {
								enabled: true,
								mode: "xy",
								rangeMin: {
									x: null,
									y: null,
								},
								rangeMax: {
									x: null,
									y: null,
								},
								speed: 20,
								threshold: 10,
							},
							zoom: {
								enabled: true,
								drag: false,
								mode: "xy",

								rangeMin: {
									x: null,
									y: null,
								},
								rangeMax: {
									x: null,
									y: null,
								},
								speed: 0.1,
								threshold: 2,
								sensitivity: 3,
							},
						},
					},
				};

				let systemChartData = GenerateSystemChart();

				var systemChart = new Chart(systemChartContext, {
					type: "bubble",
					data: systemChartData,
					options: systemChartOptions,
				});

				window.systemChart = systemChart;

				document.getElementById("systemChartHeader").innerText =
					Universe["Name"];

				document.getElementById(
					"systemChartInfo"
				).innerText = getSystemDescription();

				// Fill Select list
				$("#planetChartSelect").empty();
				Universe["Stars"].forEach((star) => {
					star["Planets"].forEach((planet) => {
						$("#planetChartSelect").append(
							`<option value="${planet["Name"]}">${planet["Name"]}</option>`
						);
					});
				});

				generatePlanetMap();
			}
			var MapSize = 512;
			var WorldHumidity;
			var WorldTemperature;
			var WorldHeight;
			var BaseT = 1.0;
			var RoughT = 1.0;
			var DetailT = 1.0;
			var NegaT = 1.0;
			var MasterScale = 1.0;
			var SeaLevel;
			var NoiseOrigin1x;
			var NoiseOrigin1z;
			var NoiseOrigin2x;
			var NoiseOrigin2z;
			var NoiseOrigin3x;
			var NoiseOrigin3z;
			var NoiseOrigin4x;
			var NoiseOrigin4z;
			var vScalex;
			var vScaley;
			var vScalez;
			var NoiseScale1x;
			var NoiseScale1z;
			var gScalex;
			var gScaley;
			var gScalez;
			var NoiseScale2x;
			var NoiseScale2z;
			var NoiseScale3x;
			var NoiseScale3z;
			var NoiseScale4x;
			var NoiseScale4z;

			function generatePlanetMap() {
				document.getElementById("planetChartHeader").innerText = $(
					"#planetChartSelect :selected"
				).val();

				var planetChartCanvas = document.getElementById("planetChartCanvas");
				planetChartCanvas.width = 512;
				planetChartCanvas.height = 512;
				var planetChartContext = planetChartCanvas.getContext("2d");
				planetChartCanvas.style.backgroundColor = "rgba(32,32,32,1)";

				var image = planetChartContext.createImageData(
					planetChartCanvas.width,
					planetChartCanvas.height
				);
				var data = image.data;

				if (seedValue) {
					noise.seed(seedValue);
				}

				// Set Map Values
				WorldHumidity = getRandomFloat(0.85, 1.15);
				WorldTemperature = getRandomFloat(0.85, 1.15);
				WorldHeight = getRandomFloat(1.0, 1.25);
				SeaLevel = getRandomFloat(0.15, 0.3);
				NoiseOrigin1x = getRandomFloat(0.0, 10.0);
				NoiseOrigin1z = getRandomFloat(0.0, 10.0);
				NoiseOrigin2x = getRandomFloat(0.0, 10.0);
				NoiseOrigin2z = getRandomFloat(0.0, 10.0);
				NoiseOrigin3x = getRandomFloat(0.0, 10.0);
				NoiseOrigin3z = getRandomFloat(0.0, 10.0);
				NoiseOrigin4x = getRandomFloat(0.0, 10.0);
				NoiseOrigin4z = getRandomFloat(0.0, 10.0);
				vScalex = 1.0;
				vScaley = 1.0;
				vScalez = 1.0;
				NoiseScale1x = getRandomFloat(vScalex, vScaley);
				NoiseScale1z = NoiseScale1x;
				gScalex = 1.0;
				gScaley = 1.0;
				gScalez = 1.0;
				NoiseScale2x = NoiseScale1x * gScalex;
				NoiseScale2z = NoiseScale1z * gScalex;
				NoiseScale3x = NoiseScale2x * gScaley;
				NoiseScale3z = NoiseScale2z * gScaley;
				NoiseScale4x = NoiseScale1x * gScalez;
				NoiseScale4z = NoiseScale1z * gScalez;

				for (var x = 0; x < planetChartCanvas.width; x++) {
					for (var y = 0; y < planetChartCanvas.height; y++) {
						//var value = noise.perlin2(x / 100, y / 100);
						var value = GetValue({ x: x, y: 1, z: y });
						value *= 4;

						var cell = (x + y * planetChartCanvas.width) * 4;
						data[cell] = data[cell + 1] = data[cell + 2] = value;
						data[cell + 3] = 255; // alpha.
					}
				}

				planetChartContext.fillColor = "black";
				planetChartContext.putImageData(image, 0, 0);
			}

			function GetHumidity(position, altitude, temperature) {
				//float r = RainT * (Mathf.PerlinNoise(Rain * position.x, Rain * position.z));
				let Humidity =
					-0.5 *
						Math.sin(
							(60.0 / Math.pow(MapSize, 2)) *
								Math.pow(position.z - MapSize / 2, 2)
						) +
					WorldHumidity -
					1 * altitude;
				if (Humidity > 1.0) {
					Humidity = 1.0;
				}
				if (Humidity < 0.0) {
					Humidity = 0.0;
				}
				return Humidity;
			}

			function GetTemperature(position, altitude) {
				//float r = TempT * (Mathf.PerlinNoise(Temp * position.x, Temp * position.z));
				let Temperature =
					-(1.0 / (MapSize / 2)) * Math.abs(position.z - MapSize / 2) +
					WorldTemperature -
					1 * altitude;
				if (Temperature > 1.0) {
					Temperature = 1.0;
				}
				if (Temperature < 0.0) {
					Temperature = 0.0;
				}
				return Temperature;
			}

			function GetAltitude(position) {
				let Base, Roughness, Detail, Negative;

				let Adjustment =
					-(
						Math.pow(position.x - MapSize / 2, 2) / Math.pow(MapSize / 2, 2) +
						Math.pow(position.z - MapSize / 2, 2) / Math.pow(MapSize / 2, 2)
					) + WorldHeight;
				Base =
					BaseT *
					noise.perlin2(
						MasterScale * NoiseScale1x * (NoiseOrigin1x + position.x),
						MasterScale * NoiseScale1z * (NoiseOrigin1z + position.z)
					);
				Roughness =
					RoughT *
					noise.perlin2(
						MasterScale * NoiseScale2x * (NoiseOrigin2x + position.x),
						MasterScale * NoiseScale2z * (NoiseOrigin2z + position.z)
					);
				Detail =
					DetailT *
					noise.perlin2(
						MasterScale * NoiseScale3x * (NoiseOrigin3x + position.x),
						MasterScale * NoiseScale3z * (NoiseOrigin3z + position.z)
					);
				Negative =
					NegaT *
					noise.perlin2(
						MasterScale * NoiseScale4x * (NoiseOrigin4x + position.x),
						MasterScale * NoiseScale4z * (NoiseOrigin4z + position.z)
					);

				let Sample =
					Adjustment * ((Base + Roughness + Detail - Negative) * 0.5);

				if (Sample < 0.0) {
					Sample = 0.0;
				}
				if (Sample > 1.0) {
					Sample = 1.0;
				}

				return Sample;
			}

			function GetValue(position) {
				let Value = 13;

				let Altitude = GetAltitude(position);

				let Temperature = GetTemperature(position, Altitude);
				let Humidity = GetHumidity(position, Altitude, Temperature);

				if (Altitude >= SeaLevel) {
					if (Temperature < 0.25) {
						//Artic
						if (Altitude - SeaLevel < 0.025) {
							//Coastal
							Value = 3; //Ice
						} else if (Altitude < 0.6) {
							//Plains
							if (Humidity < 0.33) {
								Value = 4; //Artic Desert
							} else {
								Value = 5; //Tundra
							}
						} else if (Altitude >= 0.6 && Altitude < 0.8) {
							//Hills
							Value = 6; //Tundra Hills
						} else {
							//Mountains
							Value = 7; //Tundra Mountains
						}
					} else if (Temperature >= 0.25 && Temperature < 0.5) {
						//Sub Artic
						if (Altitude - SeaLevel < 0.025) {
							//Coastal
							Value = 8; //Beach
						} else if (Altitude < 0.6) {
							//Plains
							if (Humidity < 0.33) {
								Value = 9; //Sub Artic Desert
							} else {
								Value = 10; //Taiga
							}
						} else if (Altitude >= 0.6 && Altitude < 0.8) {
							//Hills
							Value = 11; //Sub Artic Hills
						} else {
							//Mountains
							Value = 12; //Sub Artic Mountains
						}
					} else if (Temperature >= 0.5 && Temperature < 0.8) {
						//Temperate
						if (Altitude - SeaLevel < 0.025) {
							//Coastal
							Value = 13; //Beach
						} else if (Altitude - SeaLevel < 0.05 && Humidity > 0.66) {
							Value = 14; //Swamp
						} else if (Altitude < 0.6) {
							//Plains
							if (Humidity < 0.33) {
								Value = 15; //Desert
							} else if (Humidity >= 0.33 && Humidity < 0.66) {
								Value = 16; //Grasslands
							} else {
								Value = 17; //Forest
							}
						} else if (Altitude >= 0.6 && Altitude < 0.8) {
							//Hills
							if (Humidity < 0.33) {
								Value = 18; //Desert
							} else if (Humidity >= 0.33 && Humidity < 0.66) {
								Value = 19; //Grasslands
							} else {
								Value = 20; //Forest
							}
						} else {
							//Mountains
							Value = 21; //Temperate Mountains
						}
					} else if (Temperature >= 0.8) {
						//Tropical
						if (Altitude - SeaLevel < 0.025) {
							//Coastal
							Value = 22; //Beach
						} else if (Altitude - SeaLevel < 0.05 && Humidity > 0.66) {
							Value = 23; //Swamp
						} else if (Altitude < 0.6) {
							//Plains
							if (Humidity < 0.2) {
								Value = 24; //Desert
							} else if (Humidity >= 0.2 && Humidity < 0.4) {
								Value = 25; //Shrubland
							} else if (Humidity >= 0.4 && Humidity < 0.6) {
								Value = 26; //Savannah
							} else if (Humidity >= 0.6 && Humidity < 0.8) {
								Value = 27; //Forest
							} else {
								Value = 28; //Rainforest
							}
						} else if (Altitude >= 0.6 && Altitude < 0.8) {
							//Hills
							if (Humidity < 0.2) {
								Value = 29; //Desert
							} else if (Humidity >= 0.2 && Humidity < 0.4) {
								Value = 30; //Shrubland
							} else if (Humidity >= 0.4 && Humidity < 0.6) {
								Value = 31; //Savannah
							} else if (Humidity >= 0.6 && Humidity < 0.8) {
								Value = 32; //Forest
							} else {
								Value = 33; //Rainforest
							}
						} else {
							//Mountains
							Value = 34; //Tropical Mountains
						}
					}

					//In case of error
					else {
						Value = 0; //Error
					}
				} else {
					if (Altitude < SeaLevel * 0.5) {
						Value = 1; //Deep Ocean
					} else {
					}
					Value = 2; //Shallow Ocean
				}

				return Value;
			}
		</script>
	</body>
</html>
